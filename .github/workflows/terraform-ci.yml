name: Terraform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive .
    
    - name: Terraform Init (Root)
      run: terraform init -backend=false
    
    - name: Terraform Validate (Root)
      run: terraform validate
    
    - name: Terraform Init (Module)
      run: |
        cd modules/gke-autopilot
        terraform init -backend=false
    
    - name: Terraform Validate (Module)
      run: |
        cd modules/gke-autopilot
        terraform validate

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: .
        framework: terraform
        soft_fail: true
        output_format: sarif
        output_file_path: reports/results.sarif
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/results.sarif

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6
    
    - name: Install jq for dynamic config
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Make test script executable
      run: chmod +x tests/unit_test.sh
    
    - name: Run unit tests
      run: ./tests/unit_test.sh

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Infracost
      uses: infracost/actions/setup@v3
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    
    - name: Generate Infracost cost estimate baseline
      run: |
        infracost breakdown --path=. \
          --format=json \
          --out-file=/tmp/infracost-base.json \
          --terraform-var="cluster_name=ci-test-cluster" \
          --terraform-var="environment=ci"
    
    - name: Generate Infracost diff
      run: |
        infracost diff --path=. \
          --format=json \
          --compare-to=/tmp/infracost-base.json \
          --out-file=/tmp/infracost.json \
          --terraform-var="cluster_name=ci-test-cluster" \
          --terraform-var="environment=ci"
    
    - name: Post Infracost comment
      run: |
        infracost comment github --path=/tmp/infracost.json \
          --repo=$GITHUB_REPOSITORY \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update

  integration-tests:
    name: Integration Tests (Terratest)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6
        terraform_wrapper: false
    
    - name: Run integration tests
      run: |
        cd tests
        go mod download
        go test -v -timeout 30m
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup terraform-docs
      run: |
        curl -sSLo terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        sudo mv terraform-docs /usr/local/bin/
    
    - name: Generate docs
      run: terraform-docs markdown table --output-file MODULE.md modules/gke-autopilot/
    
    - name: Check if docs are up to date
      run: |
        if [ -f "modules/gke-autopilot/MODULE.md" ]; then
          git diff --exit-code modules/gke-autopilot/MODULE.md || (echo "Documentation is out of date. Run 'make docs' locally." && exit 1)
        else
          echo "No existing documentation to check."
        fi