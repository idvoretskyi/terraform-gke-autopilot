name: Terraform Plan

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-plan.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
    
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Terraform Plan (${{ matrix.environment }})
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          -no-color \
          -out=${{ matrix.environment }}.tfplan
      continue-on-error: true
    
    - name: Create Plan Summary
      run: |
        echo "## Terraform Plan Results (${{ matrix.environment }})" >> $GITHUB_STEP_SUMMARY
        if [ ${{ steps.plan.outcome }} == 'success' ]; then
          echo "✅ Plan succeeded for ${{ matrix.environment }} environment" >> $GITHUB_STEP_SUMMARY
          terraform show -no-color ${{ matrix.environment }}.tfplan | head -50 >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Plan failed for ${{ matrix.environment }} environment" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment PR
      uses: actions/github-script@v8
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = '${{ steps.plan.outcome }}';
          const environment = '${{ matrix.environment }}';
          
          // Create comment body
          let body = `## Terraform Plan Results - ${environment}\n\n`;
          
          if (plan === 'success') {
            body += `✅ Plan succeeded for **${environment}** environment\n\n`;
          } else {
            body += `❌ Plan failed for **${environment}** environment\n\n`;
          }
          
          body += `<details><summary>Show Plan Output</summary>\n\n\`\`\`\n`;
          
          try {
            const planOutput = require('child_process').execSync(`terraform show -no-color ${environment}.tfplan`, {encoding: 'utf8'});
            body += planOutput.substring(0, 65000); // GitHub comment limit
          } catch (error) {
            body += `Error reading plan: ${error.message}`;
          }
          
          body += `\n\`\`\`\n</details>`;
          
          // Find existing comment for this environment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes(`Terraform Plan Results - ${environment}`) && 
            comment.user.type === 'Bot'
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }